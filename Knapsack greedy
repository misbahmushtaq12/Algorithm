#include <stdio.h>
#include <stdlib.h>

// Structure for an item
struct Item {
    int value;
    int weight;
};

// Comparison function to sort items based on value-to-weight ratio
int compare(const void *a, const void *b) {
    double ratioA = ((double)((struct Item *)a)->value) / ((struct Item *)a)->weight;
    double ratioB = ((double)((struct Item *)b)->value) / ((struct Item *)b)->weight;
    return ratioB > ratioA ? 1 : -1;
}

// Greedy function to solve 0/1 Knapsack
double knapsackGreedy(int W, struct Item arr[], int n) {
    // Sort items based on value-to-weight ratio
    qsort(arr, n, sizeof(arr[0]), compare);

    int curWeight = 0;
    double finalValue = 0.0;

    // Loop through all items
    for (int i = 0; i < n; i++) {
        // If adding item won't overflow, add it to the knapsack
        if (curWeight + arr[i].weight <= W) {
            curWeight += arr[i].weight;
            finalValue += arr[i].value;
        } else {
            // If not, add a fraction of the item to the knapsack
            int remain = W - curWeight;
            finalValue += arr[i].value * ((double)remain / arr[i].weight);
            break;
        }
    }

    return finalValue;
}

int main() {
    int W = 50; // Knapsack capacity
    struct Item arr[] = {{60, 10}, {100, 20}, {120, 30}}; // Values and weights of items
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Maximum value that can be put in a knapsack of capacity W: %.2f\n", knapsackGreedy(W, arr, n));

    return 0;
}
