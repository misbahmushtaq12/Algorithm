#include <stdio.h>
#include <limits.h>

#define V 4 // Number of vertices in the graph

// Function to find the minimum of two values
int min(int x, int y) {
    return (x < y) ? x : y;
}

// Function to solve the TSP problem using dynamic programming
int tsp(int graph[][V], int mask, int pos, int dp[][V]) {
    // If all cities have been visited, return the cost from the last city to the starting city
    if (mask == (1 << V) - 1) {
        return graph[pos][0];
    }

    // If this subproblem has already been solved, return the value from the table
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    int ans = INT_MAX;

    // Try to go to an unvisited city
    for (int city = 0; city < V; city++) {
        if ((mask & (1 << city)) == 0) { // If city is not visited
            int newAns = graph[pos][city] + tsp(graph, mask | (1 << city), city, dp);
            ans = min(ans, newAns);
        }
    }

    // Save the result to the table
    dp[mask][pos] = ans;
    return ans;
}

// Driver program to test above function
int main() {
    // Example graph represented as an adjacency matrix
    int graph[V][V] = {{0, 10, 15, 20},
                       {10, 0, 35, 25},
                       {15, 35, 0, 30},
                       {20, 25, 30, 0}};

    // Dynamic programming table to memoize subproblems
    int dp[1 << V][V];
    
    // Initialize the dp table with -1
    for (int i = 0; i < (1 << V); i++) {
        for (int j = 0; j < V; j++) {
            dp[i][j] = -1;
        }
    }

    // Start from the first city (0) and compute the minimum cost
    int minCost = tsp(graph, 1, 0, dp);

    printf("Minimum cost of the Travelling Salesman Problem: %d\n", minCost);

    return 0;
}
