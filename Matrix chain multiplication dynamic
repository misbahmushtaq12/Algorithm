#include <stdio.h>
#include <limits.h>

// Function to find the minimum number of scalar multiplications needed to multiply the chain of matrices
int matrixChainOrder(int p[], int n) {
    int m[n][n]; // Matrix to store the minimum number of scalar multiplications needed
    int i, j, k, L, q;

    // m[i][i] is cost 0 since a single matrix doesn't need any multiplication
    for (i = 1; i < n; i++)
        m[i][i] = 0;

    // L is the chain length
    for (L = 2; L < n; L++) {
        for (i = 1; i < n - L + 1; i++) {
            j = i + L - 1;
            m[i][j] = INT_MAX; // Initialize the value to maximum integer

            for (k = i; k <= j - 1; k++) {
                // q represents the number of scalar multiplications required to multiply the matrices
                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j])
                    m[i][j] = q;
            }
        }
    }

    return m[1][n - 1]; // Return the minimum number of scalar multiplications needed for the entire chain
}

// Driver program to test above function
int main() {
    int arr[] = {5, 4, 6, 2, 7}; // Dimensions of matrices
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Minimum number of scalar multiplications needed: %d\n", matrixChainOrder(arr, size));

    return 0;
}
