#include<stdio.h>

// Function to find maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve Knapsack problem using backtracking
int knapsack(int capacity, int weights[], int values[], int n) {
    // Base case: if either capacity or number of items becomes 0, return 0
    if (n == 0 || capacity == 0)
        return 0;

    // If weight of the nth item is more than capacity, then it cannot be included in the optimal solution
    if (weights[n - 1] > capacity)
        return knapsack(capacity, weights, values, n - 1);

    // Return the maximum of two cases:
    // 1. nth item included
    // 2. nth item not included
    else
        return max(values[n - 1] + knapsack(capacity - weights[n - 1], weights, values, n - 1),
                   knapsack(capacity, weights, values, n - 1));
}

int main() {
    int capacity = 50;
    int weights[] = {10, 20, 30};
    int values[] = {60, 100, 120};
    int n = sizeof(values) / sizeof(values[0]);

    int max_value = knapsack(capacity, weights, values, n);
    printf("Maximum value in knapsack: %d\n", max_value);

    return 0;
}
